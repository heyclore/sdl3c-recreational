Programming Terms Cheat Sheet


1. Performance / Optimization Terms

Term	                        Meaning
Precompute                    Calculate once before a loop or reuse values instead of recalculating.
Reduce Moving Parts	          Simplify how many things change at once; fewer risks and bugs.
Minimize                      Iterations	Loop fewer times or combine work per iteration.
Reduce Steps	                Cut out extra calculations inside loops or functions.
Optimization	                General word for making code faster, smaller, or more efficient.
Inlining	                    Replace a function call with the actual code body to save call overhead.
Loop Unrolling	              Expand a loop to do more work per cycle, reducing loop overhead.
Cache Locality	              Organize memory so nearby data is accessed together for faster CPU cache usage.
Avoid Redundant Computation   Do not redo work you can reuse or store.
Dead Code Elimination	        Remove code that has no effect (often done by compilers automatically).
Early Exit                    Return early from functions when possible to skip extra work.
Short-Circuiting	            Stop evaluating logical expressions early when the result is already known.
Batch Processing	            Process multiple items at once instead of one-by-one.
Prefetching	                  Load data early into memory before it is needed.
Amortization	                Spread the cost of an expensive operation over many uses.


2. Code Style / Organization Terms

Term	                        Meaning
Flattening	                  Simplify nested structures (loops, trees) to a single level when possible.
Const-Correctness	            Mark variables and functions as const if they don't change — helps compilers optimize better.
Zero-Cost                     Abstraction	Design abstractions (functions, templates, structs) that compile down to efficient code without overhead.
Refactor	                    Rewrite/reorganize code to be cleaner or easier to maintain, but without changing behavior.
Boilerplate	                  Standard repeated code needed to set things up (e.g., SDL window creation).
Lazy Evaluation	              Postpone calculations until they are truly needed.


3. Casual / Real-World Programmer Slang

Term	                        Meaning
Tight loop	                  A highly optimized loop with minimal overhead.
Hot path	                    The most commonly executed code — needs to be very fast.
Cold path	                    Code that runs rarely — doesn't need to be optimized much.
Bloat	                        Extra code, features, or memory usage that is unnecessary.
Footgun	                      A dangerous coding feature that makes it easy to introduce bugs.
Syntactic Sugar	              Nicer-looking code that doesn't add new features, just makes things easier to write or read.
Overhead	                    Extra processing cost caused by features, abstraction, or safety checks.


generated by chatgpt :v
